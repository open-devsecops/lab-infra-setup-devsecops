version: "3.8"

services:
  jenkins:
    image: xinyiw12/jenkins-docker-azure:latest
    restart: always
    privileged: true
    user: root
    ports:
      - 8080:8080
      - 127.0.0.1:50000:50000
    container_name: jenkins
    volumes:
      - /home/azureuser/jenkins_compose/jenkins_configuration:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - REGION=${REGION}
    extra_hosts:
      - sonar.internal:192.168.77.1
      - zap.internal:192.168.77.1

  aws-credentials-generator-web:
    image: kevinkcy511/dashboard-frontend
    platform: linux/amd64
    container_name: azure-credentials-generator-web
    ports:
      - 127.0.0.1:7777:80

  aws-credentials-generator-server:
    image: kevinkcy511/dashboard-backend
    platform: linux/amd64
    container_name: azure-credentials-generator-server
    ports:
      - 7778:7778
    environment:
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - ACR_NAME=${ACR_NAME}
      - REGION=${REGION}

  sonarqube:
    image: sonarqube:lts
    platform: linux/amd64
    container_name: devsecops-sonarqube
    depends_on:
      - db
    ports:
      - 9000:9000
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar

  db:
    image: postgres:13
    container_name: devsecops-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - sonar_db:/var/lib/postgresql/data
      - sonar_db_data:/var/lib/postgresql

  zap-ui:
    image: zaproxy/zap-stable
    container_name: devsecops-zap
    entrypoint:
      - "zap.sh"
      - "-daemon"
      - "-port"
      - "8082"
      - "-host"
      - "0.0.0.0"
      - "-config"
      - "api.disablekey=true"
    ports:
      - "8082:8082"

# ‚Üê Declare your named volumes here:
volumes:
  sonar_db:
    driver: local
  sonar_db_data:
    driver: local
